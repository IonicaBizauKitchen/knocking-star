buildscript {
    ext {
        springBootVersion = '1.3.0.BUILD-SNAPSHOT'
        springLoadedVersion = '1.2.4.RELEASE'
        nodePluginVersion = '0.11'
        propdepsPlugin = '0.0.6'
    }

    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework:springloaded:${springLoadedVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPlugin}")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.moowork.node'
apply plugin: 'propdeps'

compileJava.options.encoding = 'UTF-8'
// You need to add compileJava.dependsOn(processResources) to your build
// to ensure that resources are processed before code is compiled. Without
// this directive any additional-spring-configuration-metadata.json files
// will not be processed.
compileJava.dependsOn(processResources)

// node configuration
node {
    version = '0.12.7'
    npmVersion = '2.11.3'
    download = true
    distBaseUrl = 'https://nodejs.org/dist'
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = file("${project.projectDir}")
}

springBoot {
    classifier = 'exec'
}

jar {
    baseName = 'knockingstar'
    version = '0.0.0'
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("mysql:mysql-connector-java")
    compile("joda-time:joda-time")
    compile("org.jadira.usertype:usertype.core:3.0.0.CR1")
    optional("org.springframework.boot:spring-boot-configuration-processor")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

// Caching of dependencies
task npmCacheConfig(type: NpmTask) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = ['config', 'set', 'cache', npmCacheDir]
}

// Install npm dependencies by using package.json
task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = ['install']
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

// Install bower dependencies by using bower.json
task bowerInstall(type: NodeTask) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    dependsOn npmPackages
}

// Move bower_component folder into our web dir
task bowerSyncJavascript(type: Sync) {
    from 'bower_components'
    into "src/main/resources/static/bower_components"
    dependsOn bowerInstall
}

task bowerPackages() {
    dependsOn bowerSyncJavascript
}

// build task is enough to run all node and bower configurations and dependency installations
build {
    dependsOn bowerPackages
}

// Clean method of node_modules, bower_components for clean task
clean.delete << file('src/main/resources/static/bower_components')
clean.delete << file('node_modules')
clean.delete << file('bower_components')